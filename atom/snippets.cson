# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.ts':
  'Console log':
    'prefix': 'log'
    'body': 'console.log($1);'
  'Console log HERE':
    'prefix': 'HERE'
    'body': 'console.log(\'HERE\');'
  'Const':
    'prefix': 'const'
    'body': 'const $1:$2 = $3;'
  'Let':
    'prefix': 'let'
    'body': 'let $1 = $2;'

'.source.js':
  'Console log':
    'prefix': 'log'
    'body': 'console.log($1);'
  'Console log HERE':
    'prefix': 'HERE'
    'body': 'console.log(\'HERE\');'
  'Const':
    'prefix': 'const'
    'body': 'const $1:$2 = $3;'
  'Let':
    'prefix': 'let'
    'body': 'let $1 = $2;'
  'React Pure':
    'prefix': 'reactpure'
    'body': '''
        import React, { Fragment } from \'react\';

        const $1(props) => (
            <Fragment>
                $2
            </Fragment>
        );
        export default $1;
    '''
